-- Programs ------------------------------------------------

entrypoints Program ;

Prog.      Program ::= [TopDef] ;

TopFDef.   TopDef ::= FDef ;

TopSDef.   TopDef ::= SDef ";" ;

TopVDecl.  TopDef ::= VDecl ";" ;

separator nonempty TopDef "" ;

-- Definitions & Declarations ---------------------------------------------

FnDef.     FDef ::= FType Ident "(" [Arg] ")" Block ;

ValArg.    Arg ::= VType Ident ;

RefArg.    Arg ::= VType "&" Ident ;

separator  Arg "," ;

VarDecl.   VDecl ::= VType [Item] ;

separator  VDecl "," ;

NoInit.    Item ::= Ident ;

Init.      Item ::= Ident "=" Expr ;

separator nonempty Item "," ;

StructDef. SDef  ::= "struct" Ident "{" [VDecl] "}" ;

-- Types ---------------------------------------------------

Int.       VType ::= "int" ;

String.    VType ::= "string" ;

Bool.      VType ::= "bool" ;

Struct.    VType ::= "struct" Ident ;

FTypeRet.  FType ::= VType ;

FTypeVoid. FType ::= "void" ;

separator  VType "," ;

-- Statements ----------------------------------------------

Blk.       Block ::= "{" [Stmt] "}" ;

Empty.     Stmt ::= ";" ;

BlockStmt. Stmt ::= Block ;

DeclStmt.  Stmt ::= VDecl ";" ;

DefStmt.   Stmt ::= SDef ";" ;

Assign.    Stmt ::= Ident "=" Expr  ";" ;

RetVal.    Stmt ::= "return" Expr ";" ;

Return.    Stmt ::= "return" ";" ;

Cond.      Stmt ::= "if" "(" Expr ")" Stmt  ;

CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;

While.     Stmt ::= "while" "(" Expr ")" Stmt ;

For.       Stmt ::= "for" Ident "=" Expr UpDown "to" Expr "do" Stmt ;

Up.        UpDown ::= "down" ;

Down.      UpDown ::= "up" ;

Break.     Stmt ::= "break" ";" ;

Continue.  Stmt ::= "continue" ";" ;

SExp.      Stmt ::= Expr ";" ;

separator  Stmt "" ;

-- Expressions ----------------------------------------------

EVar.      Expr7 ::= Ident ;

ELitInt.   Expr7 ::= Integer ;

ELitTrue.  Expr7 ::= "true" ;

ELitFalse. Expr7 ::= "false" ;

EStruct.   Expr7 ::= "{" [Item] "}" ;

EApp.      Expr7 ::= Ident "(" [Expr] ")" ;

EString.   Expr7 ::= String ;

EDot.      Expr6 ::= Expr7 "." Ident ;

Neg.       Expr5 ::= "-" Expr6 ;

Not.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ECmp.      Expr2 ::= Expr2 CmpOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

coercions  Expr 7 ;

separator  Expr "," ;

-- Operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

-- Comparisons ---------------------------------------------

LT.       CmpOp ::= "<" ;

LEQ.      CmpOp ::= "<=" ;

GT.       CmpOp ::= ">" ;

GEQ.      CmpOp ::= ">=" ;

EQ.       CmpOp ::= "==" ;

NEQ.      CmpOp ::= "!=" ;

-- Comments ------------------------------------------------

comment    "//" ;

comment    "/*" "*/" ;
