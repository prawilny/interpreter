-- Za https://www.mimuw.edu.pl/~ben/Zajecia/Mrj2019/Latte/

-- Programs ------------------------------------------------

entrypoints Program ;

Prog.       Program ::= [SDef] [VDecl] [FDef] ;

-- Definitions & Declarations ---------------------------------------------

DFun.       FDef ::= Type Ident "(" [Arg] ")" Block ;

separator   nonempty FDef "" ;

ArgVal.     Arg ::= Type Ident ;

ArgRef.     Arg ::= Type "&" Ident ;

separator   Arg "," ;

DVar.       VDecl ::= Type [Item] ;

separator   VDecl ";" ;

NoInit.     Item ::= Ident ;

Init.       Item ::= Ident "=" Expr ;

separator   nonempty Item "," ;

StructDef.  SDef  ::= "struct" Ident "[" [VDecl] "]" ;

separator   SDef "" ;

-- Types ---------------------------------------------------

TInt.       Type ::= "int" ;

TString.    Type ::= "string" ;

TBool.      Type ::= "bool" ;

TStruct.    Type ::= "struct" Ident ;

TVoid.      Type ::= "void" ;

-- Statements ----------------------------------------------

SBlock.      Stmt ::= Block ;

BBlk.       Block ::= "{" [SDef] [VDecl] [Stmt] "}" ;

SEmpty.     Stmt ::= ";" ;

SAssign.    Stmt ::= Ident "=" Expr  ";" ;

SRetVal.    Stmt ::= "return" Expr ";" ;

SReturn.    Stmt ::= "return" ";" ;

SCond.      Stmt ::= "if" "(" Expr ")" Stmt  ;

SCondElse.  Stmt ::= "if" "(" Expr ")" Block "else" Block  ;

SWhile.     Stmt ::= "while" "(" Expr ")" Stmt ;

SFor.       Stmt ::= "for" Ident "=" Expr UpDown "to" Expr "do" Stmt ;

RUp.        UpDown ::= "down" ;

RDown.      UpDown ::= "up" ;

SBreak.     Stmt ::= "break" ";" ;

SContinue.  Stmt ::= "continue" ";" ;

SExp.       Stmt ::= Expr ";" ;

separator   Stmt "" ;

-- Expressions ----------------------------------------------

EVar.       Expr7 ::= Ident ;

ELitInt.    Expr7 ::= Integer ;

ELitTrue.   Expr7 ::= "true" ;

ELitFalse.  Expr7 ::= "false" ;

EStruct.    Expr7 ::= "[" [Item] "]" ;

EApp.       Expr7 ::= Ident "(" [Expr] ")" ;

EString.    Expr7 ::= String ;

EDot.       Expr6 ::= Expr7 "." Ident ;

Neg.        Expr5 ::= "-" Expr6 ;

Not.        Expr5 ::= "!" Expr6 ;

EMul.       Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.       Expr3 ::= Expr3 AddOp Expr4 ;

ECmp.       Expr2 ::= Expr2 CmpOp Expr3 ;

EAnd.       Expr1 ::= Expr2 "&&" Expr1 ;

EOr.        Expr ::= Expr1 "||" Expr ;

coercions   Expr 7 ;

separator   Expr "," ;

-- Operators -----------------------------------------------

OPlus.      AddOp ::= "+" ;

OMinus.     AddOp ::= "-" ;

OTimes.     MulOp ::= "*" ;

ODiv.       MulOp ::= "/" ;

OMod.       MulOp ::= "%" ;

-- Comparisons ---------------------------------------------

CLTH.       CmpOp ::= "<" ;

CLEQ.       CmpOp ::= "<=" ;

CGTH.       CmpOp ::= ">" ;

CGEQ.       CmpOp ::= ">=" ;

CEQU.       CmpOp ::= "==" ;

CNEQ.       CmpOp ::= "!=" ;

-- Comments ------------------------------------------------

comment     "//" ;

comment     "/*" "*/" ;
