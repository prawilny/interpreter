JĘZYK
Obsługiwany przez interpreter język Latte+ to prosty język imperatywny oparty o standardowy język Latte z MRJP: https://www.mimuw.edu.pl/~ben/Zajecia/Mrj2019/Latte/

Jest on względem "podstawowego" języka wzbogacony o:
- globalne zmienne,
- przekazywanie parametrów prez referencję (argumenty przekazywane przez referencję są postaci "<TYP> & <NAZWA>"; przekazywanie argumentów przez wartość pozostaje możliwe).

Tak jak w Latte, logiczne ORAZ ma wyższy priorytet niż logiczne LUB.

W porównaniu z "podstawowym" językiem Latte, Latte+ utracił postinkrementację i postdekrementację.
Ograniczyłem również:
- strukturę bloku do "[deklaracja zmiennej] [instrukcja]",
- ciało funkcji do "[deklaracja zmiennej] [instrukcja] return (wyrażenie){0,1}",
- strukturę pliku źródłowego - do "[deklaracje zmiennych] [deklaracje funkcji]".

Ponadto, dostępne są wbudowane funkcje:
- void assert(bool assertion, string errorMsg),
- string concat(string fst, string snd).

KOMPILACJA
W przypadku budowania interpretera poza maszyną students należy przed wywołaniem `make` ustawić pod zmienną środowiskową BNFC ścieżkę do bnfc obsługującego poprawnie flagę "--functor".

URUCHAMIANIE
interpreter PLIK - uruchamia interpreter na programie wczytanym spod ścieżki PLIK
interpreter      - uruchamia interpreter na programie wczytanym ze standardowego wejścia (wyjście: CTRL+d)

CTRL+c przerywa wykonanie programu

STRUKTURA KATALOGU
./bad                - katalog zawierający programy niepoprawne i interesujące z punktu widzenia statycznego wykrywania błędów programu,
./good               - katalog zawierający poprawne programy ilustrujące konstrukcje języka
./src/TypeChecker.hs - moduł wykrywający statycznie wykrywalne błędy programu
./src/Interpreter.hs - moduł dynamicznie wykonujący program
./src/Main           - moduł obsługujący argumenty wiersza poleceń
./src/Utils.hs       - kod dzielony przez moduły TypeChecker i Interpreter
./Makefile

STRUKTURA ROZWIĄZANIA
Interpreter i TypeChecker są bliźniaczej konstrukcji:
- korzystają z tego samego zestawu monad (State, Reader, Except) jako swojej "monady roboczej" z dokładnością do tego, że ten pierwszy przechowuje w stanie i środowisku informacje o wartościach, a drugi - o typach,
- posiadają zestaw funkcji przerabiających elementy składni programu na "monady robocze".
